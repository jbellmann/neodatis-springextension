buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.2-SNAPSHOT'
	}
}

configure(allprojects) {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	group = 'org.springframework'

	sourceCompatibility=1.6
	targetCompatibility=1.6

	springVersion='3.1.0.RELEASE'
	neodatisVersion='1.9.30.689'
	slf4jVersion = '1.6.4'
	mockitoVersion='1.9.0-rc1'

	[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

	sourceSets.test.resources.srcDirs = ['src/test/resources', 'src/test/java']

	test.systemProperty("java.awt.headless", "true")

	repositories {
		mavenCentral()
		maven { url "http://repo.springsource.org/libs-release" }
		maven { url "http://repo.springsource.org/ebr-maven-external" }
	}

	dependencies {
		testCompile "junit:junit:4.10"
		testCompile "org.mockito:mockito-all:1.9.0-rc1"
	}

	// servlet-api (2.5) and tomcat-servlet-api (3.0) classpath entries should not be
	// exported to dependent projects in Eclipse to avoid false compilation errors due
	// to changing APIs across these versions
	eclipse.classpath.file.whenMerged { classpath ->
		classpath.entries.findAll { entry -> entry.path.contains('servlet-api') }*.exported = false
	}
}

configure(subprojects) { subproject ->
	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	jar {
		manifest.attributes['Implementation-Title'] = subproject.name
		manifest.attributes['Implementation-Version'] = subproject.version

		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			include "notice.txt"
			into "META-INF"
			expand(copyright: new Date().format('yyyy'), version: project.version)
		}
	}

	javadoc {
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		//options.overview = "${projectDir}/src/main/java/overview.html"
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

project('se-neodatis') {
	description = 'Spring-Extension NeoDatis'
	dependencies {
		compile "org.springframework:spring-core:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.neodatis.odb:neodatis-odb:$neodatisVersion"
		compile "org.slf4j:slf4j-api:$slf4jVersion"
		testCompile "org.springframework:spring-test:$springVersion"
	}
}

configure(rootProject) {
	description = 'NeoDatis Spring-Extension'

	//apply plugin: 'docbook-reference'

	//reference {
		//sourceDir = file('src/reference/docbook')
	//}

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	dependencies { // for integration tests
		testCompile project(":se-neodatis")
	}

	task api(type: Javadoc) {
		group = 'Documentation'
		description = 'Generates aggregated Javadoc API documentation.'
		title = "${rootProject.description} ${version} API"
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.overview = 'src/api/overview.html'
		options.links(
			'http://docs.jboss.org/jbossas/javadoc/4.0.5/connector'
		)
		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}
		destinationDir = new File(buildDir, "api")
		classpath = files(subprojects.collect { project ->
			project.sourceSets.main.compileClasspath
		})
		maxMemory = '1024m'
	}

	task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-framework/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}

		//from (reference) {
			//into 'reference'
		//}
	}

	task schemaZip(type: Zip) {
		group = 'Distribution'
		classifier = 'schema'
		description = "Builds -${classifier} archive containing all " +
			"XSDs for deployment at static.springframework.org/schema."

		subprojects.each { subproject ->
			def Properties schemas = new Properties();

			subproject.sourceSets.main.resources.find {
				it.path.endsWith('META-INF/spring.schemas')
			}?.withInputStream { schemas.load(it) }

			for (def key : schemas.keySet()) {
				def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
				assert shortName != key
				File xsdFile = subproject.sourceSets.main.resources.find {
					it.path.endsWith(schemas.get(key))
				}
				assert xsdFile != null
				into (shortName) {
					from xsdFile.path
				}
			}
		}
	}

	task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
		group = 'Distribution'
		classifier = 'dist'
		description = "Builds -${classifier} archive, containing all jars and docs, " +
					  "suitable for community download page."

		baseDir = "${project.name}-${project.version}";

		from('src/dist') {
			include 'readme.txt'
			include 'license.txt'
			include 'notice.txt'
			into "${baseDir}"
			expand(copyright: new Date().format('yyyy'), version: project.version)
		}

		from(zipTree(docsZip.archivePath)) {
			into "${baseDir}/docs"
		}

		from(zipTree(schemaZip.archivePath)) {
			into "${baseDir}/schema"
		}

		subprojects.each { subproject ->
			into ("${baseDir}/libs") {
				from subproject.jar
				if (subproject.tasks.findByPath('sourcesJar')) {
					from subproject.sourcesJar
				}
				if (subproject.tasks.findByPath('javadocJar')) {
					from subproject.javadocJar
				}
			}
		}
	}

	artifacts {
		archives docsZip
		archives schemaZip
		archives distZip
	}

	task wrapper(type: Wrapper) {
		description = 'Generates gradlew[.bat] scripts'
		gradleVersion = '1.0-milestone-8'
		distributionUrl = 'http://repo.gradle.org/gradle/distributions-snapshots/gradle-1.0-milestone-8-20120112000036+0100-bin.zip'
		jarFile = '.wrapper/gradle-wrapper.jar'
	}
}